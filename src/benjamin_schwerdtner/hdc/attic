
;; rel analogies

(defn analogy-transform
  "Extract the transformation from `a` to `b`.

  Returns a hypervector that represents 'what changes a into b'.
  This transformation can be applied to other vectors using analogy-apply."
  [a b]
  (hd/unbind b a))

(defn analogy-apply
  "Apply a transformation to `c` to get the analogous result.

  `transform` should be obtained from analogy-transform."
  [transform c]
  (hd/bind c transform))

(defn analogy-complete
  "Complete the analogy a:b::c:? by finding the missing element.

  Returns a hypervector d such that a is to b as c is to d.
  This is the classic analogy completion: a:b::c:d"
  [a b c]
  (let [transform (analogy-transform a b)]
    (analogy-apply transform c)))

(defn analogy-query
  "Check how well the analogy a:b::c:d holds.

  Returns a similarity score indicating how good the analogy is.
  Higher scores indicate better analogies."
  [a b c d]
  (let [expected-d (analogy-complete a b c)]
    (hd/similarity expected-d d)))

(defn analogy-batch-complete
  "Complete analogies for multiple source pairs.

  Given pairs [[a1 b1] [a2 b2] ...] and a target `c`,
  returns a superposition of all possible analogous results.
  This allows finding what c might become based on multiple examples."
  [source-pairs c]
  (hd/superposition
   (map (fn [[a b]] (analogy-complete a b c))
        source-pairs)))

(defn analogy-find-best
  "Find the best analogous match for a:b::c:? from a set of candidates.

  Returns the candidate from `candidates` that best completes the analogy."
  [a b c candidates]
  (let [expected (analogy-complete a b c)]
    (apply max-key
           #(py. (hd/similarity expected %) item)
           candidates)))

(defn relational-analogy
  "Create a relational analogy: relation1(a1, a2) :: relation2(b1, b2).

  The relation is represented as the bound pair of its arguments.
  This captures analogies like father(john, paul) : father :: mother(mary, sue) : mother"
  [relation1 a1 a2 relation2 b1 b2]
  (let [rel-a (hd/bind relation1 (hd/bind a1 a2))
        rel-b (hd/bind relation2 (hd/bind b1 b2))]
    (analogy-transform rel-a rel-b)))

(defn proportional-analogy
  "Create proportional analogies like small:large::quiet:loud.

  This works by finding the transformation between the two dimensions
  and can be used to map values along analogous scales."
  [dim1-low dim1-high dim2-low dim2-high]
  (let [dim1-transform (analogy-transform dim1-low dim1-high)
        dim2-transform (analogy-transform dim2-low dim2-high)]
    ;; The analogy captures how the transformation is similar
    (analogy-transform dim1-transform dim2-transform)))

(defn analogy-chain
  "Chain multiple analogies: start a:b c:d e:f ...

  Applies transformations sequentially starting from 'start'.
  Each pair [a b] represents a transformation that gets applied:
  start -> apply(a:b) -> apply(c:d) -> apply(e:f) -> result"
  [start & pairs]
  (reduce (fn [current [from to]]
            (analogy-complete from to current)) ;; from:to::current:result
          start
          (partition 2 pairs)))

(defn analogy-strength
  "Measure the strength of an analogy a:b::c:d.

  Returns a value between 0 and 1, where 1 indicates a perfect analogy."
  [a b c d]
  (py. (analogy-query a b c d) item))

(defn analogy-matrix
  "Create an analogy matrix for multiple source and target pairs.

  Returns a vector of [[source-idx target-idx] similarity-score] for all combinations."
  [source-pairs target-pairs]
  (vec
   (for [source-idx (range (count source-pairs))
         target-idx (range (count target-pairs))]
     (let [source-pair (nth source-pairs source-idx)
           target-pair (nth target-pairs target-idx)
           [s1 s2] source-pair
           [t1 t2] target-pair
           score (analogy-strength s1 s2 t1 t2)]
       [[source-idx target-idx] score]))))

(defn best-analogy-match
  "Find the best analogy match between source pairs and target pairs.

  Returns [best-source-pair best-target-pair score]."
  [source-pairs target-pairs]
  (let [matrix (analogy-matrix source-pairs target-pairs)
        best-entry (apply max-key second matrix)
        [source-idx target-idx] (first best-entry)
        score (second best-entry)]
    [(nth source-pairs source-idx) (nth target-pairs target-idx) score]))

(defn analogy-classify
  "Classify a new pair using existing analogy examples.

  Given training examples as [[pair1 label1] [pair2 label2] ...]
  and a new pair, returns the most likely label based on analogy similarity."
  [training-examples new-pair]
  (let [[new-a new-b] new-pair
        similarities (map (fn [[pair label]]
                            (let [[train-a train-b] pair
                                  sim (analogy-strength train-a train-b new-a new-b)]
                              [label sim]))
                          training-examples)]
    (first (apply max-key second similarities))))
